!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/amalyshenko/prj/esp32-audio-dock/esp32-audio-dock/firmware/esp32-i2s-esp8266audio/.pio/libdeps/louder-lolin_d1_mini_32/esp32-TAS5766m-dac/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
ACK_CHECK_DIS	tas5766m.hpp	/^#define ACK_CHECK_DIS /;"	d
ACK_CHECK_EN	tas5766m.hpp	/^#define ACK_CHECK_EN /;"	d
ACK_VAL	tas5766m.hpp	/^#define ACK_VAL /;"	d
CFG_END_1	startup/tas5766m.h	/^#define CFG_END_1 /;"	d
CFG_END_2	startup/tas5766m.h	/^#define CFG_END_2 /;"	d
CFG_END_3	startup/tas5766m.h	/^#define CFG_END_3 /;"	d
CFG_META_BURST	startup/tas5766m.h	/^#define CFG_META_BURST /;"	d
CFG_META_DELAY	startup/tas5766m.h	/^#define CFG_META_DELAY /;"	d
CFG_META_SWITCH	startup/tas5766m.h	/^#define CFG_META_SWITCH /;"	d
I2C_MASTER_NUM	tas5766m.hpp	/^#define I2C_MASTER_NUM /;"	d
I2C_TAS5766M_MASTER_NUM	tas5766m.hpp	/^#define I2C_TAS5766M_MASTER_NUM /;"	d
NACK_VAL	tas5766m.hpp	/^#define NACK_VAL /;"	d
READ_BIT	tas5766m.hpp	/^#define READ_BIT /;"	d
TAG	TAS5766m.cpp	/^static const char *TAG = "TAS5766";$/;"	v	typeref:typename:const char *	file:
TAS5766M_ADDRESS	tas5766m.hpp	/^#define TAS5766M_ADDRESS /;"	d
TAS5766M_ADR_PIN_CONFIG_REGISTER	tas5766m.hpp	/^#define TAS5766M_ADR_PIN_CONFIG_REGISTER /;"	d
TAS5766M_ADR_PIN_CTRL_REGISTER	tas5766m.hpp	/^#define TAS5766M_ADR_PIN_CTRL_REGISTER /;"	d
TAS5766M_AGAIN_REGISTER	tas5766m.hpp	/^#define TAS5766M_AGAIN_REGISTER /;"	d
TAS5766M_ANA_CTRL_REGISTER	tas5766m.hpp	/^#define TAS5766M_ANA_CTRL_REGISTER /;"	d
TAS5766M_ASSERT	TAS5766m.cpp	/^#define TAS5766M_ASSERT(/;"	d	file:
TAS5766M_AUTOMUTE_STATE_REGISTER	tas5766m.hpp	/^#define TAS5766M_AUTOMUTE_STATE_REGISTER /;"	d
TAS5766M_AUTO_MUTE_CTRL_REGISTER	tas5766m.hpp	/^#define TAS5766M_AUTO_MUTE_CTRL_REGISTER /;"	d
TAS5766M_AUTO_MUTE_TIME_REGISTER	tas5766m.hpp	/^#define TAS5766M_AUTO_MUTE_TIME_REGISTER /;"	d
TAS5766M_BCK_MON_REGISTER	tas5766m.hpp	/^#define TAS5766M_BCK_MON_REGISTER /;"	d
TAS5766M_BQ_WR_CTRL1_REGISTER	tas5766m.hpp	/^#define TAS5766M_BQ_WR_CTRL1_REGISTER /;"	d
TAS5766M_CHANNEL_FORCE_HIZ_REGISTER	tas5766m.hpp	/^#define TAS5766M_CHANNEL_FORCE_HIZ_REGISTER /;"	d
TAS5766M_CHAN_FAULT_REGISTER	tas5766m.hpp	/^#define TAS5766M_CHAN_FAULT_REGISTER /;"	d
TAS5766M_CLKDET_STATUS_REGISTER	tas5766m.hpp	/^#define TAS5766M_CLKDET_STATUS_REGISTER /;"	d
TAS5766M_CLOCK_DET_CTRL_REGISTER	tas5766m.hpp	/^#define TAS5766M_CLOCK_DET_CTRL_REGISTER /;"	d
TAS5766M_DAC_CTRL_REGISTER	tas5766m.hpp	/^#define TAS5766M_DAC_CTRL_REGISTER /;"	d
TAS5766M_DEVICE_CTRL_1_REGISTER	tas5766m.hpp	/^#define TAS5766M_DEVICE_CTRL_1_REGISTER /;"	d
TAS5766M_DEVICE_CTRL_2_REGISTER	tas5766m.hpp	/^#define TAS5766M_DEVICE_CTRL_2_REGISTER /;"	d
TAS5766M_DIE_ID_REGISTER	tas5766m.hpp	/^#define TAS5766M_DIE_ID_REGISTER /;"	d
TAS5766M_DIG_VOL_CTRL2_REGISTER	tas5766m.hpp	/^#define TAS5766M_DIG_VOL_CTRL2_REGISTER /;"	d
TAS5766M_DIG_VOL_CTRL3_REGISTER	tas5766m.hpp	/^#define TAS5766M_DIG_VOL_CTRL3_REGISTER /;"	d
TAS5766M_DIG_VOL_CTRL_REGISTER	tas5766m.hpp	/^#define TAS5766M_DIG_VOL_CTRL_REGISTER /;"	d
TAS5766M_DSP_MISC_REGISTER	tas5766m.hpp	/^#define TAS5766M_DSP_MISC_REGISTER /;"	d
TAS5766M_FAULT_CLEAR_REGISTER	tas5766m.hpp	/^#define TAS5766M_FAULT_CLEAR_REGISTER /;"	d
TAS5766M_FS_MON_REGISTER	tas5766m.hpp	/^#define TAS5766M_FS_MON_REGISTER /;"	d
TAS5766M_GLOBAL_FAULT1_REGISTER	tas5766m.hpp	/^#define TAS5766M_GLOBAL_FAULT1_REGISTER /;"	d
TAS5766M_GLOBAL_FAULT2_REGISTER	tas5766m.hpp	/^#define TAS5766M_GLOBAL_FAULT2_REGISTER /;"	d
TAS5766M_GPIO_PDN	tas5766m.hpp	/^#define TAS5766M_GPIO_PDN /;"	d
TAS5766M_GPIO_PDN_MASK	tas5766m.hpp	/^#define TAS5766M_GPIO_PDN_MASK /;"	d
TAS5766M_I2C_PAGE_AUTO_INC_REGISTER	tas5766m.hpp	/^#define TAS5766M_I2C_PAGE_AUTO_INC_REGISTER /;"	d
TAS5766M_I2S_CTRL_REGISTER	tas5766m.hpp	/^#define TAS5766M_I2S_CTRL_REGISTER /;"	d
TAS5766M_MISC_CONTROL_REGISTER	tas5766m.hpp	/^#define TAS5766M_MISC_CONTROL_REGISTER /;"	d
TAS5766M_OT_WARNING_REGISTER	tas5766m.hpp	/^#define TAS5766M_OT_WARNING_REGISTER /;"	d
TAS5766M_PHASE_CTRL_REGISTER	tas5766m.hpp	/^#define TAS5766M_PHASE_CTRL_REGISTER /;"	d
TAS5766M_PIN_CONTROL1_REGISTER	tas5766m.hpp	/^#define TAS5766M_PIN_CONTROL1_REGISTER /;"	d
TAS5766M_PIN_CONTROL2_REGISTER	tas5766m.hpp	/^#define TAS5766M_PIN_CONTROL2_REGISTER /;"	d
TAS5766M_POWER_STATE_REGISTER	tas5766m.hpp	/^#define TAS5766M_POWER_STATE_REGISTER /;"	d
TAS5766M_RESET_CTRL_REGISTER	tas5766m.hpp	/^#define TAS5766M_RESET_CTRL_REGISTER /;"	d
TAS5766M_SAP_CTRL1_REGISTER	tas5766m.hpp	/^#define TAS5766M_SAP_CTRL1_REGISTER /;"	d
TAS5766M_SAP_CTRL2_REGISTER	tas5766m.hpp	/^#define TAS5766M_SAP_CTRL2_REGISTER /;"	d
TAS5766M_SAP_CTRL3_REGISTER	tas5766m.hpp	/^#define TAS5766M_SAP_CTRL3_REGISTER /;"	d
TAS5766M_SDOUT_SEL_REGISTER	tas5766m.hpp	/^#define TAS5766M_SDOUT_SEL_REGISTER /;"	d
TAS5766M_SIG_CH_CTRL_REGISTER	tas5766m.hpp	/^#define TAS5766M_SIG_CH_CTRL_REGISTER /;"	d
TAS5766M_SS_CTRL0_REGISTER	tas5766m.hpp	/^#define TAS5766M_SS_CTRL0_REGISTER /;"	d
TAS5766M_SS_CTRL1_REGISTER	tas5766m.hpp	/^#define TAS5766M_SS_CTRL1_REGISTER /;"	d
TAS5766M_SS_CTRL2_REGISTER	tas5766m.hpp	/^#define TAS5766M_SS_CTRL2_REGISTER /;"	d
TAS5766M_SS_CTRL3_REGISTER	tas5766m.hpp	/^#define TAS5766M_SS_CTRL3_REGISTER /;"	d
TAS5766M_SS_CTRL4_REGISTER	tas5766m.hpp	/^#define TAS5766M_SS_CTRL4_REGISTER /;"	d
WRITE_BIT	tas5766m.hpp	/^#define WRITE_BIT /;"	d
__anonc8c30ce40108	startup/tas5766m.h	/^typedef struct {$/;"	s
_read	TAS5766m.cpp	/^esp_err_t TAS5766m::_read(uint8_t register_name, uint8_t *data_rd, size_t size)$/;"	f	class:TAS5766m	typeref:typename:esp_err_t
_read_byte	TAS5766m.cpp	/^esp_err_t TAS5766m::_read_byte(uint8_t register_name, uint8_t *data)$/;"	f	class:TAS5766m	typeref:typename:esp_err_t
_transmit_registers	TAS5766m.cpp	/^esp_err_t TAS5766m::_transmit_registers(const TAS5766m_cfg_reg_t *conf_buf, int size) {$/;"	f	class:TAS5766m	typeref:typename:esp_err_t
_write_byte	TAS5766m.cpp	/^esp_err_t TAS5766m::_write_byte(uint8_t register_name, uint8_t value)$/;"	f	class:TAS5766m	typeref:typename:esp_err_t
_write_bytes	TAS5766m.cpp	/^esp_err_t TAS5766m::_write_bytes(uint8_t *reg, int regLen, uint8_t *data, int datalen)$/;"	f	class:TAS5766m	typeref:typename:esp_err_t
begin	TAS5766m.cpp	/^esp_err_t TAS5766m::begin()$/;"	f	class:TAS5766m	typeref:typename:esp_err_t
clearFaultState	TAS5766m.cpp	/^esp_err_t TAS5766m::clearFaultState() $/;"	f	class:TAS5766m	typeref:typename:esp_err_t
getFaultState	TAS5766m.cpp	/^esp_err_t TAS5766m::getFaultState(uint8_t *h70, uint8_t *h71, uint8_t *h72)$/;"	f	class:TAS5766m	typeref:typename:esp_err_t
getGain	TAS5766m.cpp	/^esp_err_t TAS5766m::getGain(uint8_t* volume)$/;"	f	class:TAS5766m	typeref:typename:esp_err_t
getVolume	TAS5766m.cpp	/^esp_err_t TAS5766m::getVolume(uint8_t* volume)$/;"	f	class:TAS5766m	typeref:typename:esp_err_t
init	TAS5766m.cpp	/^esp_err_t TAS5766m::init()$/;"	f	class:TAS5766m	typeref:typename:esp_err_t
offset	startup/tas5766m.h	/^  uint8_t offset;$/;"	m	struct:__anonc8c30ce40108	typeref:typename:uint8_t
setGain	TAS5766m.cpp	/^esp_err_t TAS5766m::setGain(uint8_t value)$/;"	f	class:TAS5766m	typeref:typename:esp_err_t
setVolume	TAS5766m.cpp	/^esp_err_t TAS5766m::setVolume(uint8_t value)$/;"	f	class:TAS5766m	typeref:typename:esp_err_t
TAS5766m	tas5766m.hpp	/^    TAS5766m(TwoWire *wire) : wire(wire){};$/;"	f	class:TAS5766m
TAS5766m	tas5766m.hpp	/^class TAS5766m$/;"	c
TAS5766m_cfg_reg_t	startup/tas5766m.h	/^} TAS5766m_cfg_reg_t;$/;"	t	typeref:struct:__anonc8c30ce40108
TAS5766m_registers	startup/TAS5766m_0.1+eq_100Hz_cutoff+drc.h	/^static const TAS5766m_cfg_reg_t TAS5766m_registers[] = {$/;"	v	typeref:typename:const TAS5766m_cfg_reg_t[]
TAS5766m_registers	startup/TAS5766m_0.1+eq_100Hz_cutoff.h	/^static const TAS5766m_cfg_reg_t TAS5766m_registers[] = {$/;"	v	typeref:typename:const TAS5766m_cfg_reg_t[]
TAS5766m_registers	startup/TAS5766m_0.1+eq_40Hz_cutoff.h	/^static const TAS5766m_cfg_reg_t TAS5766m_registers[] = {$/;"	v	typeref:typename:const TAS5766m_cfg_reg_t[]
TAS5766m_registers	startup/TAS5766m_0.1+eq_60Hz_cutoff.h	/^static const TAS5766m_cfg_reg_t TAS5766m_registers[] = {$/;"	v	typeref:typename:const TAS5766m_cfg_reg_t[]
TAS5766m_registers	startup/TAS5766m_1.0+3-band_drc+agl_-12db.h	/^static const TAS5766m_cfg_reg_t TAS5766m_registers[] = {$/;"	v	typeref:typename:const TAS5766m_cfg_reg_t[]
TAS5766m_registers	startup/TAS5766m_1.0+3-band_drc.h	/^static const TAS5766m_cfg_reg_t TAS5766m_registers[] = {$/;"	v	typeref:typename:const TAS5766m_cfg_reg_t[]
TAS5766m_registers	startup/TAS5766m_1.0+agl_-12db.h	/^static const TAS5766m_cfg_reg_t TAS5766m_registers[] = {$/;"	v	typeref:typename:const TAS5766m_cfg_reg_t[]
TAS5766m_registers	startup/TAS5766m_1.0+basic.h	/^static const TAS5766m_cfg_reg_t TAS5766m_registers[] = {$/;"	v	typeref:typename:const TAS5766m_cfg_reg_t[]
TAS5766m_registers	startup/TAS5766m_1.1+eq_60Hz_cutoff+left.h	/^static const TAS5766m_cfg_reg_t TAS5766m_registers[] = {$/;"	v	typeref:typename:const TAS5766m_cfg_reg_t[]
TAS5766m_registers	startup/TAS5766m_1.1+eq_60Hz_cutoff+mono.h	/^static const TAS5766m_cfg_reg_t TAS5766m_registers[] = {$/;"	v	typeref:typename:const TAS5766m_cfg_reg_t[]
TAS5766m_registers	startup/TAS5766m_1.1+eq_60Hz_cutoff+right.h	/^static const TAS5766m_cfg_reg_t TAS5766m_registers[] = {$/;"	v	typeref:typename:const TAS5766m_cfg_reg_t[]
TAS5766m_registers	startup/TAS5766m_2.0+3-band_drc+agl_-12db.h	/^static const TAS5766m_cfg_reg_t TAS5766m_registers[] = {$/;"	v	typeref:typename:const TAS5766m_cfg_reg_t[]
TAS5766m_registers	startup/TAS5766m_2.0+3-band_drc.h	/^static const TAS5766m_cfg_reg_t TAS5766m_registers[] = {$/;"	v	typeref:typename:const TAS5766m_cfg_reg_t[]
TAS5766m_registers	startup/TAS5766m_2.0+agl_-12db.h	/^static const TAS5766m_cfg_reg_t TAS5766m_registers[] = {$/;"	v	typeref:typename:const TAS5766m_cfg_reg_t[]
TAS5766m_registers	startup/TAS5766m_2.0+basic.h	/^static const TAS5766m_cfg_reg_t TAS5766m_registers[] = {$/;"	v	typeref:typename:const TAS5766m_cfg_reg_t[]
TAS5766m_registers	startup/TAS5766m_2.0+minimal.h	/^static const TAS5766m_cfg_reg_t TAS5766m_registers[] = {$/;"	v	typeref:typename:const TAS5766m_cfg_reg_t[]
value	startup/tas5766m.h	/^  uint8_t value;$/;"	m	struct:__anonc8c30ce40108	typeref:typename:uint8_t
wire	tas5766m.hpp	/^    TwoWire *wire;$/;"	m	class:TAS5766m	typeref:typename:TwoWire *
